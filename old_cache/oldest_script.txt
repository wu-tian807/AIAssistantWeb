// 配置 markdown-it 实例，启用各种功能
import { initMarkdownit ,applyCodeHighlight} from "./utils/markdownit.js";
const md = initMarkdownit();
// 存储聊天消息历史
let messages = [];
// 当前的流式响应对象
let currentStream = null;

// 获取 DOM 元素
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');
// 监听输入框变化，控制发送按钮状态
userInput.addEventListener('input', () => {
    sendButton.disabled = !userInput.value.trim();
});

// 监听回车键发送消息
userInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        if (!sendButton.disabled) {
            sendMessage();
        }
    }
});

// 发送按钮点击事件
sendButton.addEventListener('click', () => {
    if (sendButton.classList.contains('stop')) {
        stopGeneration();
    } else {
        sendMessage();
    }
});

// 添加一个变量来存储当前的 reader
let currentReader = null;

// 修改 stopGeneration 函数
function stopGeneration() {
    if (currentReader) {
        try {
            currentReader.cancel(); // 取消读取流
        } catch (error) {
            console.log('Stream already closed or cancelled:', error);
        }
        currentReader = null;
    }
    sendButton.textContent = '发送';
    sendButton.classList.remove('stop');
    sendButton.disabled = false;
    userInput.disabled = false;
}



// 在文件开头添加一个新的变量来跟踪用户是否正在滚动
let userScrolling = false;
let lastScrollTop = 0;

// 在文件开头添加这个函数
function shouldAutoScroll(container) {
    // 如果用户正在滚动，不自动滚动
    if (userScrolling) return false;
    
    // 检查是否已经滚动到接近底部（距离底部100px以内）
    const isNearBottom = container.scrollHeight - container.scrollTop - container.clientHeight < 100;
    return isNearBottom;
}

// 定义支持的自定义附件类型
const SUPPORTED_ATTACHMENT_TYPES = ['image', 'documents', 'text', 'audio', 'video', 'binary'];
// 附件处理函数
function createAttachmentElement(attachment) {
    // 类型校验
    if (!attachment || !attachment.type || !SUPPORTED_ATTACHMENT_TYPES.includes(attachment.type)) {
        console.warn(`Invalid or unsupported attachment type: ${attachment?.type}`);
        return null;
    }
    
    // 如果有 mime_type，使用它来决定类型
    if (attachment.mime_type) {
        const customType = FILE_TYPE_MAPPING[attachment.mime_type];
        switch (customType) {
            case 'image':
                return createImageAttachment(attachment);
            case 'video':
                return createVideoAttachment(attachment);
            case 'file':
                return createFileAttachment(attachment);
            default:
                return null;
        }
    }
    
    // 如果没有 mime_type，使用 type 字段
    switch (attachment.type) {
        case 'image':
            return createImageAttachment(attachment);
        case 'video':
            return createVideoAttachment(attachment);
        case 'file':
            return createFileAttachment(attachment);
        default:
            return null;
    }
}
// 图片附件处理
function createImageAttachment(attachment) {
    const imgWrapper = document.createElement('div');
    imgWrapper.className = 'message-image-wrapper';
    
    const img = document.createElement('img');
    img.src = `data:image/jpeg;base64,${attachment.base64}`;
    img.alt = attachment.fileName;
    img.className = 'message-image';
    
    // 添加点击放大功能
    img.onclick = () => createImageModal(img.src);
    
    imgWrapper.appendChild(img);
    return imgWrapper;
}

// 创建图片模态框
function createImageModal(src) {
    const modal = document.createElement('div');
    modal.className = 'image-modal';
    
    // 创建关闭按钮
    const closeBtn = document.createElement('button');
    closeBtn.className = 'modal-close-btn';
    closeBtn.innerHTML = '×';
    
    const modalImg = document.createElement('img');
    modalImg.src = src;
    modalImg.className = 'modal-image';
    
    // 添加关闭按钮和图片到模态框
    modal.appendChild(closeBtn);
    modal.appendChild(modalImg);
    document.body.appendChild(modal);
    
    // 处理关闭事件
    const closeModal = () => {
        modal.classList.add('modal-closing');
        setTimeout(() => modal.remove(), 300); // 等待动画完成后移除
    };
    
    // 点击关闭按钮关闭
    closeBtn.onclick = (e) => {
        e.stopPropagation();
        closeModal();
    };
    
    // 点击模态框背景关闭
    modal.onclick = (e) => {
        if (e.target === modal) {
            closeModal();
        }
    };
    
    // 按 ESC 键关闭
    const handleKeyDown = (e) => {
        if (e.key === 'Escape') {
            closeModal();
            document.removeEventListener('keydown', handleKeyDown);
        }
    };
    document.addEventListener('keydown', handleKeyDown);
    
    // 防止滚动穿透
    document.body.style.overflow = 'hidden';
    modal.addEventListener('remove', () => {
        document.body.style.overflow = '';
    });
}

// 预留的视频附件处理函数
function createVideoAttachment(attachment) {
    // TODO: 实现视频附件处理
    return null;
}

// 预留的文件附件处理函数
function createFileAttachment(attachment) {
    // TODO: 实现文件附件处理
    return null;
}

// 创建附件容器
function createAttachmentsContainer(attachments) {
    if (!attachments || attachments.length === 0) return null;
    
    const container = document.createElement('div');
    container.className = 'message-attachments';
    
    // 根据附件类型分组
    const attachmentsByType = attachments.reduce((acc, attachment) => {
        if (!acc[attachment.type]) {
            acc[attachment.type] = [];
        }
        acc[attachment.type].push(attachment);
        return acc;
    }, {});
    
    // 处理每种类型的附件
    Object.entries(attachmentsByType).forEach(([type, items]) => {
        const typeContainer = document.createElement('div');
        typeContainer.className = `message-${type}s`;
        
        items.forEach(item => {
            const element = createAttachmentElement(item);
            if (element) {
                typeContainer.appendChild(element);
            }
        });
        
        container.appendChild(typeContainer);
    });
    
    return container;
}

// 修改后的 appendMessage 函数
function appendMessage(content, isUser = false, messageIndex = null, attachments = []) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user-message' : 'assistant-message'}`;
    
    const messageWrapper = document.createElement('div');
    messageWrapper.className = 'message-wrapper';
    
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    
    const messageActions = document.createElement('div');
    messageActions.className = 'message-actions';
    
    if (isUser) {
        // 创建文本内容容器
        const textContent = document.createElement('div');
        textContent.className = 'text-content';
        textContent.textContent = content;
        messageContent.appendChild(textContent);
        
        // 处理附件（如果有的话）
        if (attachments && attachments.length > 0) {
            const attachmentsContainer = createAttachmentsContainer(attachments);
            if (attachmentsContainer) {
                messageContent.appendChild(attachmentsContainer);
            }
        }
        
        // 添加编辑按钮
        const editBtn = document.createElement('button');
        editBtn.className = 'edit-btn';
        editBtn.innerHTML = '✏️ 编辑';
        editBtn.onclick = () => editUserMessage(messageIndex, content);
        messageActions.appendChild(editBtn);
    } else {
        messageContent.innerHTML = md.render(content);
        applyCodeHighlight(messageContent);
        
        // 为助手消息添加重新生成按钮
        const regenerateBtn = document.createElement('button');
        regenerateBtn.className = 'regenerate-btn';
        regenerateBtn.innerHTML = '🔄 重新生成';
        regenerateBtn.onclick = () => regenerateMessage(messageIndex);
        messageActions.appendChild(regenerateBtn);
        
        // 如果存在多个版本，添加版本控制
        const message = currentConversationId && conversations.find(c => c.id === currentConversationId)?.messages[messageIndex];
        if (message?.versions?.length > 1) {
            const versionControl = document.createElement('div');
            versionControl.className = 'version-control';
            
            const prevButton = document.createElement('button');
            prevButton.className = 'version-btn';
            prevButton.textContent = '←';
            prevButton.disabled = message.currentVersion === 0;
            prevButton.onclick = () => switchVersion(messageIndex, message.currentVersion - 1);
            
            const nextButton = document.createElement('button');
            nextButton.className = 'version-btn';
            nextButton.textContent = '→';
            nextButton.disabled = message.currentVersion === message.versions.length - 1;
            nextButton.onclick = () => switchVersion(messageIndex, message.currentVersion + 1);
            
            const versionText = document.createElement('span');
            versionText.className = 'version-text';
            versionText.textContent = `版本 ${message.currentVersion + 1}/${message.versions.length}`;
            
            versionControl.appendChild(prevButton);
            versionControl.appendChild(versionText);
            versionControl.appendChild(nextButton);
            messageActions.appendChild(versionControl);
        }
    }
    
    messageWrapper.appendChild(messageContent);
    messageWrapper.appendChild(messageActions);
    messageDiv.appendChild(messageWrapper);
    chatMessages.appendChild(messageDiv);
    
    if (shouldAutoScroll(chatMessages)) {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
}

// 在文件开头添加新的变量
let conversations = [];
let currentConversationId = null;

// 在文件开头添加这个变量
const default_system_prompt = `你是一个AI助理。你需要尽可能地满足用户的需求。在页面格式方面有以下提示：请直接输出markdown内容，不要添加额外的代码块标记。如果需要显示代码，直接使用markdown的代码块语法。
对于数学公式，请遵循以下格式：
1. 行内公式：使用单个 $ 符号包裹，例如：$E=mc^2$
2. 独立公式：使用双 $$ 符号包裹，例如：
   $$
   \int_{-\infty}^{\infty} e^{-x^2} dx = \sqrt{\pi}
   $$
3. 带编号的公：使用 equation 环境，例如：
   \begin{equation}
   F = ma
   \end{equation}
4. 多行对齐公式：使用 align 环境，例如：
   $
   \begin{align}
   x &= a + b \\
   y &= c + d
   \end{align}
   $
5. 矩阵：使 matrix、pmatrix、bmatrix 等环境，例如：
   $$
   \begin{pmatrix}
   a & b \\
   c & d
   \end{pmatrix}
   $$

支持的数学符号和命令：
- 上标：^
- 下标：_
- 分数：\frac{分子}{分母}
- 求和：\sum_{下限}^{上限}
- 积分：\int_{下限}^{上限}
- 希腊字母：\alpha, \beta, \gamma, \pi 等
- 数学函数：\sin, \cos, \tan, \log, \lim 等
- 特殊符号：\infty, \partial, \nabla 等
- 矢量：\vec{x} 或 \boldsymbol{x}
- 数学字体：\mathbb{R}, \mathcal{L} 等

请确保公式格式正确，并在适当的场景使用合适的公式环境。`;

// 修改 createNewConversation 函数
async function createNewConversation() {
    // 如果有正在进行的流，先停止它
    if (currentReader) {
        await stopGeneration();
    }

    // 检查当前对话是否为空对话
    if (currentConversationId) {
        const currentConversation = conversations.find(c => c.id === currentConversationId);
        if (currentConversation && currentConversation.messages.length === 0) {
            // 如果当前已经是一个空对话，就不需要创建新的
            return currentConversation;
        }
    }
    
    // 创建新对话，直接使用默认提示词
    const conversation = {
        id: Date.now().toString(),
        title: '新对话',
        messages: [],
        systemPrompt: default_system_prompt // 直接使用默认提示词
    };
    
    // 添加到对话列表
    conversations.unshift(conversation);
    currentConversationId = conversation.id;
    
    // 清空聊天界面
    chatMessages.innerHTML = '';
    
    // 重置消息数组，使用默认提示词
    messages = [
        {"role": "system", "content": default_system_prompt}
    ];
    
    // 更新系统提示词文本框
    const systemPromptTextarea = document.getElementById('system-prompt');
    systemPromptTextarea.value = default_system_prompt;
    
    // 保存并更新UI
    await saveConversations();
    renderConversationsList();
    
    return conversation;
}

// 修改 saveConversations 函数
async function saveConversations() {
    try {
        // 在保存前，确保当前对话的系统提示词是最新的
        if (currentConversationId) {
            const currentConversation = conversations.find(c => c.id === currentConversationId);
            if (currentConversation) {
                const systemPrompt = document.getElementById('system-prompt').value;
                currentConversation.systemPrompt = systemPrompt; // 不需要 trim，保持原样
            }
        }

        const response = await fetch('/api/conversations', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ conversations })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '保存对话失败');
        }
        
        const data = await response.json();
        if(data.message === '保存成功') {
            showToast('保存成功');
            // 移除这行，避免重新加载覆盖当前状态
            // await loadConversations();
        }
        
        return true;
    } catch (error) {
        console.error('保存对话出错:', error);
        showToast(`保存失败: ${error.message}`, 'error');
        
        if (await confirmDialog('保存失败，是否重试？')) {
            return saveConversations();
        }
        
        return false;
    }
}

// 辅助函数：显示提示信息
function showToast(message, type = 'success') {
    // 创建提示元素
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    
    // 添加到页面
    document.body.appendChild(toast);
    
    // 3秒后自动消失
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// 辅助函数：确认对话框
function confirmDialog(message) {
    return new Promise((resolve) => {
        const result = confirm(message);
        resolve(result);
    });
}

// 从数据库加载对话
async function loadConversations() {
    try {
        const response = await fetch('/api/conversations');
        if (!response.ok) {
            throw new Error('加载对话失败');
        }
        const data = await response.json();
        conversations = data.conversations || [];
        
        // 如果有当前对话，更新系统提示词
        if (currentConversationId) {
            const currentConversation = conversations.find(c => c.id === currentConversationId);
            if (currentConversation) {
                const systemPromptTextarea = document.getElementById('system-prompt');
                systemPromptTextarea.value = currentConversation.systemPrompt || default_system_prompt;
            }
        }
        
        renderConversationsList();
    } catch (error) {
        console.error('加载对话出错:', error);
        conversations = [];
        renderConversationsList();
    }
}

// 渲染对话列表
function renderConversationsList() {
    const conversationsList = document.querySelector('.conversations-list');
    conversationsList.innerHTML = '';
    
    conversations.forEach(conv => {
        const item = document.createElement('div');
        item.className = `conversation-item ${conv.id === currentConversationId ? 'active' : ''}`;
        item.setAttribute('data-id', conv.id);
        
        // 创建标题容器
        const titleContainer = document.createElement('div');
        titleContainer.className = 'conversation-title-container';
        
        // 创建标题元素
        const title = document.createElement('div');
        title.className = 'conversation-title';
        title.textContent = conv.title;
        title.onclick = () => switchConversation(conv.id);
        
        // 创建编辑按钮
        const editBtn = document.createElement('button');
        editBtn.className = 'edit-title-btn';
        editBtn.innerHTML = '✏️';
        editBtn.onclick = (e) => {
            e.stopPropagation();
            editConversationTitle(conv.id);
        };
        
        // 创建删除按钮
        const deleteBtn = document.createElement('div');
        deleteBtn.className = 'delete-conversation';
        deleteBtn.textContent = '×';
        deleteBtn.onclick = (e) => {
            e.stopPropagation();
            deleteConversation(conv.id);
        };
        
        titleContainer.appendChild(title);
        titleContainer.appendChild(editBtn);
        item.appendChild(titleContainer);
        item.appendChild(deleteBtn);
        conversationsList.appendChild(item);
    });
}

// 修改 switchConversation 函数
async function switchConversation(conversationId) {
    // 如果有正在进行的流，先停止它
    if (currentReader) {
        await stopGeneration();
    }
    
    currentConversationId = conversationId;
    const conversation = conversations.find(c => c.id === conversationId);
    if (conversation) {
        // 更新系统提示词
        const systemPromptTextarea = document.getElementById('system-prompt');
        systemPromptTextarea.value = conversation.hasOwnProperty('systemPrompt') ? 
            conversation.systemPrompt : default_system_prompt;
        
        clearChatMessages();
        messages = [
            {"role": "system", "content": conversation.systemPrompt || default_system_prompt} // 只在发送消息时使用默认提示词
        ];
        conversation.messages.forEach((msg, index) => {
            messages.push(msg);
            appendMessage(msg.content, msg.role === 'user', index, msg.attachments);
        });
        renderConversationsList();
        
        try {
            await fetch(`/api/conversations/${conversationId}/switch`, {
                method: 'POST'
            });
        } catch (error) {
            console.error('切换对话出错:', error);
        }
    }
}

// 清空聊天消息
function clearChatMessages() {
    const chatMessages = document.getElementById('chat-messages');
    chatMessages.innerHTML = '';
    // 重置 messages 数组，但保留系统提示
    messages = [
        {"role": "system", "content": default_system_prompt}
    ];
}
function hasAttachments() {
    const imagePreviewList = document.getElementById('image-preview-list');
    return imagePreviewList && imagePreviewList.children.length > 0;
}
function collectAttachments() {
    const imagePreviewList = document.getElementById('image-preview-list');
    const attachments = [];

    Array.from(imagePreviewList.children).forEach(item => {
        const imgElement = item.querySelector('img');
        const fileName = item.querySelector('.image-name').textContent;
        const filePath = item.getAttribute('data-local-path'); // 提取图片路径

        attachments.push({
            type:"image",
            base64:imgElement.src.split(',')[1],
            fileName:fileName,
            filePath:filePath || null// 添加文件本地路径
        });
    });

    return attachments;
    /*
    返回完整附件对象结构：
    {
    "type": "image",
    "base64": "base64_encoded_string",
    "fileName": "example.jpg",
    "filePath": "/uploads/user123/example.jpg"
    }
     */
}
function clearAttachmentPreview(){
    const imagePreviewList = document.getElementById('image-preview-list');
    imagePreviewList.innerHTML = '';
}
// 修改现有的sendMessage函数
async function sendMessage() {
    const content = userInput.value.trim();
    if (!content && !hasAttachments()) return;

    // 获取选中的模型ID
    const modelSelect = document.getElementById('model-select');
    const selectedModel = modelSelect.value;
    
    if (!selectedModel) {
        alert('请选择一个模型');
        return;
    }

    // 确保有当前对话
    if (!currentConversationId) {
        await createNewConversation();
    }

    // 将当前对话移动到列表顶部
    const currentIndex = conversations.findIndex(c => c.id === currentConversationId);
    if (currentIndex > 0) {
        const [conversation] = conversations.splice(currentIndex, 1);
        conversations.unshift(conversation);
        renderConversationsList();
    }

    // 获取当前对话
    const currentConversation = conversations[0]; // 现在一定在第一位
    
    //准备用户消息和附件
    const attachments = collectAttachments();
    const userMessage = {
        role: "user",
        content: content,
        attachments: attachments
    };

    // 添加用户消息到界面和存储
    appendMessage(content, true, messages.length, attachments);
    messages.push(userMessage);
    currentConversation.messages.push(userMessage);
    
    // 如果是第一条消息，生成对话标题
    if (currentConversation.messages.length === 1) {
        // 先设置一个临时标题
        currentConversation.title = content.slice(0, 20) + (content.length > 20 ? '...' : '');
        renderConversationsList();
        
        // 异步生成标题
        generateTitle(content);
    }

    // 清空输入框并更新按钮状态
    userInput.value = '';
    //清空附件预览
    clearAttachmentPreview();
    sendButton.textContent = '停止';
    sendButton.classList.add('stop');

    let assistantMessage = '';
    // 获取当前消息的索引（用于重新生成按钮）
    const messageIndex = currentConversation.messages.length;
    
    // 创建带有重新生成按钮的消息元素
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message assistant-message';
    
    const messageWrapper = document.createElement('div');
    messageWrapper.className = 'message-wrapper';
    
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    
    const messageActions = document.createElement('div');
    messageActions.className = 'message-actions';
    
    const regenerateBtn = document.createElement('button');
    regenerateBtn.className = 'regenerate-btn';
    regenerateBtn.innerHTML = '🔄 重新生成';
    regenerateBtn.onclick = () => regenerateMessage(messageIndex);
    
    messageActions.appendChild(regenerateBtn);
    messageWrapper.appendChild(messageContent);
    messageWrapper.appendChild(messageActions);
    messageDiv.appendChild(messageWrapper);
    chatMessages.appendChild(messageDiv);
    
    try {
        // 发送请求到服务器
        const response = await fetch('/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                messages: messages,
                conversation_id: currentConversationId,
                model_id: selectedModel  // 添加模型ID
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        // 保存 reader 对象以便能够中断它
        const reader = response.body.getReader();
        currentReader = reader;
        const decoder = new TextDecoder();

    // 循环读取响应流
    while (true) {
        try {
            const { value, done } = await reader.read();
            if (done) break;

            const text = decoder.decode(value);
            const lines = text.split('\n');

            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    try {
                        const data = JSON.parse(line.slice(6));
                        if (data.error) {
                            throw new Error(data.error);
                        }
                        if (data.content) {
                            assistantMessage += data.content;
                            messageContent.innerHTML = md.render(assistantMessage);
                            applyCodeHighlight(messageContent);

                            // 修改这里的滚动逻辑
                            if (shouldAutoScroll(chatMessages)) {
                                chatMessages.scrollTop = chatMessages.scrollHeight;
                            }
                        }
                    } catch (error) {
                        console.error('Error parsing SSE message:', error);
                        break;
                    }
                }
            }
        } catch (error) {
            if (error.name === 'AbortError') {
                console.log('Stream was cancelled or closed');
                break;
            }
            throw error;
        }
    }

    // 只有在成功接收到内容时才保存到消息历史
    if (assistantMessage.trim()) {
        currentConversation.messages.push({ role: "assistant", content: assistantMessage });
        await saveConversations();
    }
    } catch (error) {
    console.error('Error:', error);
    appendMessage('发生错误: ' + error.message, false);
    } finally {
    if (currentReader) {
        try {
            await currentReader.cancel();
        } catch (e) {
            console.log('Error cancelling stream:', e);
        }
        currentReader = null;
    }
    userInput.disabled = false;
    sendButton.textContent = '发送';
    sendButton.classList.remove('stop');
    sendButton.disabled = false;
    userInput.focus();
    }
}
// 添加删除对话的函数
async function deleteConversation(conversationId) {
    if (!confirm('确定要删除这个对话吗？')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/conversations/${conversationId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error('删除对话失败');
        }
        
        const index = conversations.findIndex(c => c.id === conversationId);
        if (index !== -1) {
            conversations.splice(index, 1);
            await saveConversations();
            
            if (conversationId === currentConversationId) {
                if (conversations.length > 0) {
                    await switchConversation(conversations[0].id);
                } else {
                    await createNewConversation();
                }
            } else {
                renderConversationsList();
            }
        }
    } catch (error) {
        console.error('删除对话出错:', error);
        alert('删除对话失败，请重试');
    }
}

// 在文档加载完成后初始化
document.addEventListener('DOMContentLoaded', async () => {
    await loadConversations();
    await loadModels();  // 添加加载模型列表
    
    // 绑定新建对话按钮事件
    document.getElementById('new-chat-btn').addEventListener('click', createNewConversation);
    
    // 如果没有对话，创建一个新的
    if (conversations.length === 0) {
        await createNewConversation();
    } else {
        // 加载最近的对话，并确保消息历史同步
        const lastConversation = conversations[0];
        await switchConversation(lastConversation.id);
    }
    
    // 添加滚动事件监听
    chatMessages.addEventListener('scroll', () => {
        // 检测用户是否正在滚动
        const currentScrollTop = chatMessages.scrollTop;
        if (currentScrollTop !== lastScrollTop) {
            userScrolling = true;
            // 设置一个定时器，在用户停止滚动1秒后重置状态
            clearTimeout(window.scrollTimeout);
            window.scrollTimeout = setTimeout(() => {
                userScrolling = false;
            }, 1000);
        }
        lastScrollTop = currentScrollTop;
    });

    // 创建隐藏的文件输入元素
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.id = 'file-input';
    fileInput.accept = 'image/*';  // 只接受图片文件
    document.body.appendChild(fileInput);

    // 绑定上传按钮点击事件
    const uploadButton = document.getElementById('upload-button');
    uploadButton.addEventListener('click', () => {
        fileInput.click();
    });

    // 将图片插入到图片预览列表
const imagePreviewList = document.getElementById('image-preview-list'); // 获取图片预览列表容器

// 处理文件选择
fileInput.addEventListener('change', async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    // 检查文件类型
    if (!file.type.startsWith('image/')) {
        showError('请选择图片文件');
        return;
    }

    // 检查文件大小（限制为10MB）
    if (file.size > 10 * 1024 * 1024) {
        showError('图片大小不能超过10MB');
        return;
    }

    // 创建 FormData 对象
    const formData = new FormData();
    formData.append('image', file);

    // 显示上传中的提示
    const userInput = document.getElementById('user-input');
    const originalPlaceholder = userInput.placeholder;
    const uploadButton = document.getElementById('upload-button');
    uploadButton.disabled = true;

    try {
        userInput.placeholder = '正在上传图片...';
        userInput.disabled = true;

        // 发送上传请求
        const response = await fetch('/upload_image', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.error || '上传失败');
        }

        const base64Image = data.base64_image;
        const localFilePath = data.file_path;

        // 创建图片预览项
        const imagePreviewList = document.getElementById('image-preview-list');
        const imageItem = document.createElement('div');
        imageItem.className = 'image-preview-item';

        // 图片展示
        const imgElement = document.createElement('img');
        imgElement.src = `data:image/jpeg;base64,${base64Image}`;
        imgElement.alt = file.name;
        imgElement.className = 'preview-image';

        // 图片文件名
        const fileName = document.createElement('span');
        fileName.textContent = file.name;
        fileName.className = 'image-name';

        // 保存文件本地路径
        imageItem.setAttribute('data-local-path', localFilePath);

        // 删除按钮
        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'x';
        deleteButton.className = 'delete-image';
        deleteButton.addEventListener('click', () => {
            imagePreviewList.removeChild(imageItem);
        });

        // 将元素添加到图片预览项
        imageItem.appendChild(imgElement);
        imageItem.appendChild(fileName);
        imageItem.appendChild(deleteButton);

        // 添加图片预览项到列表
        imagePreviewList.appendChild(imageItem);

    } catch (error) {
        console.error('上传失败:', error);
        showError(error.message || '图片上传失败，请重试');
    } finally {
        // 恢复输入框和上传按钮状态
        userInput.placeholder = originalPlaceholder;
        userInput.disabled = false;
        uploadButton.disabled = false;
        // 清空文件输入，允许重复上传相同文件
        fileInput.value = '';
    }
});
});

// 添加加载模型列表的函数
async function loadModels() {
    try {
        const response = await fetch('/api/models');
        const models = await response.json();
        const select = document.getElementById('model-select');
        
        // 清空现有选项
        select.innerHTML = '<option value="" disabled>选择模型...</option>';
        
        // 添加xAI模型组
        if (models.xai && models.xai.models.length > 0) {
            const xaiGroup = document.createElement('optgroup');
            xaiGroup.label = 'xAI Models';
            models.xai.models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.id;
                option.textContent = `${model.name} - ${model.description}`;
                xaiGroup.appendChild(option);
            });
            select.appendChild(xaiGroup);
        }
        
        // 添加Google模型组
        if (models.google && models.google.models.length > 0) {
            const googleGroup = document.createElement('optgroup');
            googleGroup.label = 'Google Models';
            models.google.models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.id;
                option.textContent = `${model.name} - ${model.description}`;
                googleGroup.appendChild(option);
            });
            select.appendChild(googleGroup);
        }
        
        // 设置默认选中的模型
        select.value = 'grok-2-vision-1212';
    } catch (error) {
        console.error('获取模型列表失败:', error);
    }
}

// 添加复制代码功能
function copyCode(button) {
    const pre = button.parentElement.nextElementSibling;
    const code = pre.querySelector('code');
    const text = code.innerText;

    navigator.clipboard.writeText(text).then(() => {
        button.textContent = '已复制！';
        button.classList.add('copied');
        
        setTimeout(() => {
            button.textContent = '复制代码';
            button.classList.remove('copied');
        }, 2000);
    }).catch(err => {
        console.error('复制失败:', err);
        button.textContent = '复制失败';
        
        setTimeout(() => {
            button.textContent = '复制代码';
        }, 2000);
    });
}

// 确保 copyCode 函数在全局范围可用
window.copyCode = copyCode; 

// 修改重新生成消息的函数
async function regenerateMessage(messageIndex) {
    if (!currentConversationId) return;
    
    const currentConversation = conversations.find(c => c.id === currentConversationId);
    if (!currentConversation) return;
    
    const message = currentConversation.messages[messageIndex];
    if (!message || message.role !== 'assistant') return;
    
    // 初始化versions数组(如果不存在)
    if (!message.versions) {
        message.versions = [message.content];
        message.currentVersion = 0;
    }
    
    // 获取到指定消息之前的所有消息
    const messagesUntilIndex = currentConversation.messages.slice(0, messageIndex);
    
    // 设置messages数组用于API请求
    messages = [
        {"role": "system", "content": default_system_prompt},
        ...messagesUntilIndex
    ];
    
    // 禁用发送按钮，显示停止按钮
    sendButton.textContent = '停止';
    sendButton.classList.add('stop');
    
    try {
        // 获取选中的模型ID
        const modelSelect = document.getElementById('model-select');
        const selectedModel = modelSelect.value;
        
        if (!selectedModel) {
            alert('请选择一个模型');
            return;
        }
        
        const response = await fetch('/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                messages: messages,
                conversation_id: currentConversationId,
                model_id: selectedModel
            })
        });
        
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        
        const reader = response.body.getReader();
        currentReader = reader;
        const decoder = new TextDecoder();
        
        let assistantMessage = '';
        
        // 获取当前消息元素
        const messageDiv = chatMessages.children[messageIndex];
        const messageContent = messageDiv.querySelector('.message-content');
        
        while (true) {
            try {
                const { value, done } = await reader.read();
                if (done) break;
                
                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');
                
                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        try {
                            const data = JSON.parse(line.slice(6));
                            if (data.error) {
                                console.error('Server error:', data.error);
                                messageContent.innerHTML = md.render('发生错误，请重试');
                            } else if (data.content) {
                                assistantMessage += data.content;
                                messageContent.innerHTML = md.render(assistantMessage);
                                applyCodeHighlight(messageContent);
                                if (shouldAutoScroll(chatMessages)) {
                                    chatMessages.scrollTop = chatMessages.scrollHeight;
                                }
                            }
                        } catch (e) {
                            console.error('Error parsing SSE data:', e);
                        }
                    }
                }
            } catch (error) {
                if (error.name === 'AbortError' || error.name === 'CancelError') {
                    console.log('Stream reading cancelled');
                    break;
                }
                throw error;
            }
        }
        
        if (assistantMessage.trim()) {
            // 将新的回复添加到versions数组
            message.versions.push(assistantMessage);
            message.currentVersion = message.versions.length - 1;
            message.content = assistantMessage;
            
            // 更新UI，添加版本控制和重新生成按钮
            const messageWrapper = messageDiv.querySelector('.message-wrapper');
            const messageActions = messageWrapper.querySelector('.message-actions');
            messageActions.innerHTML = ''; // 清空现有按钮
            
            // 添加版本控制
            if (message.versions.length > 1) {
                const versionControl = document.createElement('div');
                versionControl.className = 'version-control';
                
                const prevButton = document.createElement('button');
                prevButton.className = 'version-btn';
                prevButton.textContent = '←';
                prevButton.disabled = message.currentVersion === 0;
                prevButton.onclick = () => switchVersion(messageIndex, message.currentVersion - 1);
                
                const nextButton = document.createElement('button');
                nextButton.className = 'version-btn';
                nextButton.textContent = '→';
                nextButton.disabled = message.currentVersion === message.versions.length - 1;
                nextButton.onclick = () => switchVersion(messageIndex, message.currentVersion + 1);
                
                const versionText = document.createElement('span');
                versionText.className = 'version-text';
                versionText.textContent = `版本 ${message.currentVersion + 1}/${message.versions.length}`;
                
                versionControl.appendChild(prevButton);
                versionControl.appendChild(versionText);
                versionControl.appendChild(nextButton);
                messageActions.appendChild(versionControl);
            }
            
            // 添加重新生成按钮
            const regenerateBtn = document.createElement('button');
            regenerateBtn.className = 'regenerate-btn';
            regenerateBtn.innerHTML = '🔄 重新生成';
            regenerateBtn.onclick = () => regenerateMessage(messageIndex);
            messageActions.appendChild(regenerateBtn);
            
            // 保存对话
            await saveConversations();
        }
    } catch (error) {
        console.error('Error:', error);
        messageContent.innerHTML = md.render('发生错误，请重试');
    } finally {
        if (currentReader) {
            try {
                await currentReader.cancel();
            } catch (e) {
                console.log('Error cancelling stream:', e);
            }
            currentReader = null;
        }
        sendButton.textContent = '发送';
        sendButton.classList.remove('stop');
        sendButton.disabled = false;
    }
}
// 修改 editUserMessage 函数
function editUserMessage(messageIndex, originalContent) {
    if (!currentConversationId) return;
    
    const currentConversation = conversations.find(c => c.id === currentConversationId);
    if (!currentConversation) return;
    
    // 获取编辑的消息元素和附件
    const messageDiv = chatMessages.children[messageIndex];
    if (!messageDiv) return;
    
    const originalMessage = currentConversation.messages[messageIndex];
    const originalAttachments = originalMessage.attachments || [];
    
    // 创建编辑框容器
    const editDiv = document.createElement('div');
    editDiv.className = 'edit-message-container';
    
    // 创建文本编辑区
    const editTextarea = document.createElement('textarea');
    editTextarea.className = 'edit-textarea';
    editTextarea.value = originalContent;
    
    // 创建图片预览区
    const imagePreviewArea = document.createElement('div');
    imagePreviewArea.className = 'edit-image-preview-list';
    
    // 添加现有的图片
    originalAttachments.forEach(attachment => {
        if (attachment.type === 'image') {
            const imageItem = document.createElement('div');
            imageItem.className = 'image-preview-item';
            
            const img = document.createElement('img');
            img.src = `data:image/jpeg;base64,${attachment.base64}`;
            img.className = 'preview-image';
            
            const fileName = document.createElement('span');
            fileName.textContent = attachment.fileName;
            fileName.className = 'image-name';
            
            const deleteButton = document.createElement('button');
            deleteButton.textContent = 'x';
            deleteButton.className = 'delete-image';
            deleteButton.onclick = () => imageItem.remove();
            
            imageItem.appendChild(img);
            imageItem.appendChild(fileName);
            imageItem.appendChild(deleteButton);
            imageItem.setAttribute('data-local-path', attachment.filePath);
            
            imagePreviewArea.appendChild(imageItem);
        }
    });
    
    // 创建上传新图片的按钮
    const uploadButton = document.createElement('button');
    uploadButton.className = 'upload-button';
    uploadButton.textContent = '添加图片';
    uploadButton.onclick = () => {
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = 'image/*';
        
        fileInput.onchange = async (e) => {
            const file = e.target.files[0];
            if (!file) return;
            
            const formData = new FormData();
            formData.append('image', file);
            
            try {
                const response = await fetch('/upload_image', {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) throw new Error('上传失败');
                
                const data = await response.json();
                
                // 创建新的图片预览项
                const imageItem = document.createElement('div');
                imageItem.className = 'image-preview-item';
                
                const img = document.createElement('img');
                img.src = `data:image/jpeg;base64,${data.base64_image}`;
                img.className = 'preview-image';
                
                const fileName = document.createElement('span');
                fileName.textContent = file.name;
                fileName.className = 'image-name';
                
                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'x';
                deleteButton.className = 'delete-image';
                deleteButton.onclick = () => imageItem.remove();
                
                imageItem.appendChild(img);
                imageItem.appendChild(fileName);
                imageItem.appendChild(deleteButton);
                imageItem.setAttribute('data-local-path', data.file_path);
                
                imagePreviewArea.appendChild(imageItem);
            } catch (error) {
                console.error('上传失败:', error);
                alert('图片上传失败，请重试');
            }
        };
        
        fileInput.click();
    };
    
    // 创建按钮容器
    const buttonContainer = document.createElement('div');
    buttonContainer.className = 'edit-buttons';
    
    const saveButton = document.createElement('button');
    saveButton.textContent = '保存';
    saveButton.onclick = async () => {
        const newContent = editTextarea.value.trim();
        if (!newContent) return;
        
        // 收集当前的图片附件
        const newAttachments = Array.from(imagePreviewArea.children).map(item => ({
            type: 'image',
            base64: item.querySelector('img').src.split(',')[1],
            fileName: item.querySelector('.image-name').textContent,
            filePath: item.getAttribute('data-local-path')
        }));
        
        // 更新消息内容和附件
        currentConversation.messages[messageIndex].content = newContent;
        currentConversation.messages[messageIndex].attachments = newAttachments;
        
        // 更新UI
        messageDiv.style.display = 'block';
        const messageContent = messageDiv.querySelector('.message-content');
        messageContent.innerHTML = ''; // 清空现有内容
        
        // 添加文本内容
        const textContent = document.createElement('div');
        textContent.className = 'text-content';
        textContent.textContent = newContent;
        messageContent.appendChild(textContent);
        
        // 添加图片附件
        if (newAttachments.length > 0) {
            const attachmentsContainer = createAttachmentsContainer(newAttachments);
            if (attachmentsContainer) {
                messageContent.appendChild(attachmentsContainer);
            }
        }
        
        // 移除编辑框
        editDiv.remove();
        
        // 触发重新生成
        await regenerateMessage(messageIndex + 1);
    };
    
    const cancelButton = document.createElement('button');
    cancelButton.textContent = '取消';
    cancelButton.onclick = () => {
        messageDiv.style.display = 'block';
        editDiv.remove();
    };
    
    buttonContainer.appendChild(saveButton);
    buttonContainer.appendChild(cancelButton);
    
    // 组装编辑框
    editDiv.appendChild(editTextarea);
    editDiv.appendChild(uploadButton);
    editDiv.appendChild(imagePreviewArea);
    editDiv.appendChild(buttonContainer);
    
    // 隐藏原始消息
    messageDiv.style.display = 'none';
    
    // 在原始消息之后插入编辑框
    messageDiv.parentNode.insertBefore(editDiv, messageDiv.nextSibling);
    
    // 自动聚焦到编辑框
    editTextarea.focus();
}

// 添加切换版本的函数
function switchVersion(messageIndex, newVersion) {
    const currentConversation = conversations.find(c => c.id === currentConversationId);
    if (!currentConversation) return;
    
    const message = currentConversation.messages[messageIndex];
    if (!message || !message.versions || !message.versions[newVersion]) return;
    
    // 更新当前版本
    message.currentVersion = newVersion;
    message.content = message.versions[newVersion];
    
    // 更新UI
    const messageDiv = chatMessages.children[messageIndex];
    const messageContent = messageDiv.querySelector('.message-content');
    messageContent.innerHTML = md.render(message.content);
    applyCodeHighlight(messageContent);
    
    // 更新版本控制按钮状态
    const messageActions = messageDiv.querySelector('.message-actions');
    if (messageActions) {
        // 清空现有的操作按钮
        messageActions.innerHTML = '';
        
        // 重新添加重新生成按钮
        const regenerateBtn = document.createElement('button');
        regenerateBtn.className = 'regenerate-btn';
        regenerateBtn.innerHTML = '🔄 重新生成';
        regenerateBtn.onclick = () => regenerateMessage(messageIndex);
        messageActions.appendChild(regenerateBtn);
        
        // 重新添加版本控制
        if (message.versions.length > 1) {
            const versionControl = document.createElement('div');
            versionControl.className = 'version-control';
            
            const prevButton = document.createElement('button');
            prevButton.className = 'version-btn';
            prevButton.textContent = '←';
            prevButton.disabled = newVersion === 0;
            prevButton.onclick = () => switchVersion(messageIndex, newVersion - 1);
            
            const nextButton = document.createElement('button');
            nextButton.className = 'version-btn';
            nextButton.textContent = '→';
            nextButton.disabled = newVersion === message.versions.length - 1;
            nextButton.onclick = () => switchVersion(messageIndex, newVersion + 1);
            
            const versionText = document.createElement('span');
            versionText.className = 'version-text';
            versionText.textContent = `版本 ${newVersion + 1}/${message.versions.length}`;
            
            versionControl.appendChild(prevButton);
            versionControl.appendChild(versionText);
            versionControl.appendChild(nextButton);
            messageActions.appendChild(versionControl);
        }
    }
    
    saveConversations();
}

//用于剪贴板粘贴图片监听
document.addEventListener('DOMContentLoaded', async () => {
    // ... 现有的初始化代码 ...

    // 添加剪贴板粘贴事件监听
    userInput.addEventListener('paste', async (e) => {
        // 阻止默认粘贴行为
        e.preventDefault();

        // 获取剪贴板数据
        const clipboardData = e.clipboardData;
        const items = clipboardData.items;

        let hasImage = false;
        let hasText = false;

        // 遍历剪贴板数据
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            
            if (item.type.indexOf('image') !== -1) {
                hasImage = true;
                const file = item.getAsFile();
                
                // 检查文件大小
                if (file.size > 10 * 1024 * 1024) {
                    showError('图片大小不能超过10MB');
                    continue;
                }

                // 创建 FormData 对象
                const formData = new FormData();
                formData.append('image', file);

                try {
                    const response = await fetch('/upload_image', {
                        method: 'POST',
                        body: formData
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.error || '上传失败');
                    }

                    // 获取图片预览列表
                    const imagePreviewList = document.getElementById('image-preview-list');
                    
                    // 创建图片预览项
                    const imageItem = document.createElement('div');
                    imageItem.className = 'image-preview-item';
                    
                    // 图片展示
                    const imgElement = document.createElement('img');
                    imgElement.src = `data:image/jpeg;base64,${data.base64_image}`;
                    imgElement.alt = '粘贴的图片';
                    imgElement.className = 'preview-image';
                    
                    // 图片文件名
                    const fileName = document.createElement('span');
                    fileName.textContent = `粘贴的图片_${Date.now()}.png`;
                    fileName.className = 'image-name';
                    
                    // 保存文件本地路径
                    imageItem.setAttribute('data-local-path', data.file_path);
                    
                    // 删除按钮
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'x';
                    deleteButton.className = 'delete-image';
                    deleteButton.addEventListener('click', () => {
                        imagePreviewList.removeChild(imageItem);
                    });
                    
                    // 将元素添加到图片预览项
                    imageItem.appendChild(imgElement);
                    imageItem.appendChild(fileName);
                    imageItem.appendChild(deleteButton);
                    
                    // 添加图片预览项到列表
                    imagePreviewList.appendChild(imageItem);

                } catch (error) {
                    console.error('上传失败:', error);
                    showError(error.message || '图片上传失败，请重试');
                }
            } else if (item.type === 'text/plain') {
                hasText = true;
                item.getAsString(text => {
                    const start = userInput.selectionStart;
                    const end = userInput.selectionEnd;
                    const value = userInput.value;
                    userInput.value = value.substring(0, start) + text + value.substring(end);
                    userInput.selectionStart = userInput.selectionEnd = start + text.length;
                });
            }
        }

        // 如果既没有图片也没有文本，显示提示
        if (!hasImage && !hasText) {
            showError('剪贴板中没有可用的内容');
        }
    });
});

document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('system-prompt-header');
    const textarea = document.getElementById('system-prompt');
    const toggleButton = header.querySelector('.toggle-button');
    
    // 如果 textarea 是空的，填充默认提示词
    if (!textarea.value.trim()) {
        textarea.value = default_system_prompt;
    }

    // 初始状态设置为收起
    textarea.classList.add('collapsed');
    
    const togglePrompt = (e) => {
        if (e.target === textarea) {
            return;
        }
        
        textarea.classList.toggle('collapsed');
        toggleButton.classList.toggle('rotated');
        
        if (!textarea.classList.contains('collapsed')) {
            textarea.style.height = 'auto';
            const height = Math.min(textarea.scrollHeight, 200);
            textarea.style.height = height + 'px';
        } else {
            textarea.style.height = '0';
        }
    };

    header.addEventListener('click', togglePrompt);
    
    // 文本框的高度自适应
    textarea.addEventListener('input', () => {
        if (!textarea.classList.contains('collapsed')) {
            textarea.style.height = 'auto';
            const height = Math.min(textarea.scrollHeight, 200);
            textarea.style.height = height + 'px';
        }
    });
});

// 添加系统提示词变更监听
document.addEventListener('DOMContentLoaded', () => {
    // ... 现有的 DOMContentLoaded 代码 ...

    // 添加系统提示词变更事件监听
    const systemPromptTextarea = document.getElementById('system-prompt');
    let saveTimeout;
    
    systemPromptTextarea.addEventListener('input', () => {
        // 使用防抖处理，避免频繁保存
        clearTimeout(saveTimeout);
        saveTimeout = setTimeout(async () => {
            if (currentConversationId) {
                const currentConversation = conversations.find(c => c.id === currentConversationId);
                if (currentConversation) {
                    currentConversation.systemPrompt = systemPromptTextarea.value; // 更新系统提示词
                    messages[0] = {"role": "system", "content": currentConversation.systemPrompt || default_system_prompt}; // 只在发送消息时使用默认提示词
                    await saveConversations();
                }
            }
        }, 1000); // 1秒后保存
    });
});

// 在文件开头添加这个函数
function showError(message) {
    const toast = document.createElement('div');
    toast.className = 'toast error';
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
}

// 添加生成标题的函数
async function generateTitle(firstMessage) {
    try {
        const response = await fetch('/generate_title', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                message: firstMessage,
                model_id: 'gemini-1.5-flash-8b'
            })
        });

        if (!response.ok) throw new Error('生成标题失败');

        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let title = '';
        const conversationItem = document.querySelector(`.conversation-item[data-id="${currentConversationId}"]`);
        const titleElement = conversationItem?.querySelector('.conversation-title');

        while (true) {
            const { value, done } = await reader.read();
            if (done) break;

            const chunk = decoder.decode(value);
            const lines = chunk.split('\n');

            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    try {
                        const data = JSON.parse(line.slice(6));
                        if (data.content) {
                            title += data.content;
                            if (titleElement) {
                                titleElement.textContent = title;
                            }
                        }
                    } catch (e) {
                        console.error('Error parsing title SSE data:', e);
                    }
                }
            }
        }

        // 更新对话标题
        if (title.trim()) {
            const currentConversation = conversations.find(c => c.id === currentConversationId);
            if (currentConversation) {
                currentConversation.title = title.trim();
                await saveConversations();
            }
        }

    } catch (error) {
        console.error('生成标题失败:', error);
    }
}

// 添加编辑对话标题的函数
function editConversationTitle(conversationId) {
    const conversationItem = document.querySelector(`.conversation-item[data-id="${conversationId}"]`);
    const titleContainer = conversationItem.querySelector('.conversation-title-container');
    const titleElement = titleContainer.querySelector('.conversation-title');
    const currentTitle = titleElement.textContent;
    
    // 创建输入框
    const input = document.createElement('input');
    input.type = 'text';
    input.className = 'edit-title-input';
    input.value = currentTitle;
    
    // 替换标题元素
    titleContainer.replaceChild(input, titleElement);
    input.focus();
    input.select();
    
    // 处理保存
    const saveTitle = async () => {
        const newTitle = input.value.trim();
        if (newTitle && newTitle !== currentTitle) {
            const conversation = conversations.find(c => c.id === conversationId);
            if (conversation) {
                conversation.title = newTitle;
                await saveConversations();
            }
        }
        titleElement.textContent = newTitle || currentTitle;
        titleContainer.replaceChild(titleElement, input);
    };
    
    // 监听事件
    input.onblur = saveTitle;
    input.onkeydown = (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            saveTitle();
        } else if (e.key === 'Escape') {
            titleElement.textContent = currentTitle;
            titleContainer.replaceChild(titleElement, input);
        }
    };
}

